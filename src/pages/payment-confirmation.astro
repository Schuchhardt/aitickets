---
import AppHeader from "../components/AppHeader.vue";
import AppFooter from "../components/AppFooter.vue";
import TicketInfo from "../components/TicketInfo.vue";
import Layout from '../layouts/Layout.astro';
import "../styles/global.css";
import { createClient } from '@supabase/supabase-js';
import { createHmac } from 'node:crypto';

// Inicializar el cliente de Supabase
const supabaseUrl = import.meta.env.SUPABASE_URL;
const supabaseAnonKey = import.meta.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Configuración de seguridad
const request = Astro.request;
// const allowedOrigins = ['https://aitickets.cl', 'https://www.aitickets.cl', 'https://www.flow.cl', 'https://sandbox.flow.cl', 'http://localhost:4321'];
// const origin = request.headers.get('origin');
// if (!allowedOrigins.includes(origin)) {
//   return new Response('Origen no permitido', { status: 403 });
// }

/**
 * Firma los parámetros usando HMAC-SHA256 con secretKey
 * @param {Object} params - Objeto con los parámetros (sin incluir la firma "s")
 * @param {string} secretKey - Clave secreta para firmar
 * @returns {string} - Firma generada (hash HMAC-SHA256 en hexadecimal)
 */
function generateSignature(params, secretKey) {
  // 1. Claves ordenadas alfabéticamente
  const keys = Object.keys(params).filter(key => key !== 's').sort();

  // 2. Concatenar en formato nombre + valor
  const stringToSign = keys.map(key => key + params[key]).join('');

  // 3. Firmar con HMAC-SHA256
  const hmac = createHmac('sha256', secretKey);
  hmac.update(stringToSign);
  const signature = hmac.digest('hex');

  return signature;
}

// Variables para almacenar datos
let paymentDetails = null;
let paymentStatusMessage = '';
let eventData = null;
let ticketData = [];

// Procesar la solicitud POST
if (request.method === 'POST') {
  const formData = await request.formData();
  const token = formData.get('token');

  if (token) {
    // Consultar el estado del pago en Flow
    const flowApiKey = import.meta.env.FLOW_API_KEY;
    const flowApiSecret = import.meta.env.FLOW_SECRET_KEY;
    const flowApiUrl = `${import.meta.env.FLOW_BASE_URL}/payment/getStatus`;
    const signature = generateSignature({ apiKey: flowApiKey, token }, flowApiSecret);

    // Construir la URL con los parámetros necesarios
    const url = `${flowApiUrl}?apiKey=${flowApiKey}&token=${token}&s=${signature}`;

    const flowResponse = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (flowResponse.ok) {
      const paymentStatus = await flowResponse.json();
      const { commerceOrder, status, amount } = paymentStatus;

      // Obtener detalles de la orden desde Supabase
      const { data: orderData, error } = await supabase
        .from('event_orders')
        .select('*')
        .eq('id', commerceOrder)
        .single();

      console.log('Datos de la orden:', orderData);

      if (error) {
        console.error('Error al obtener la orden desde Supabase:', error.message);
        paymentStatusMessage = 'Hubo un problema al recuperar los detalles de tu orden. Por favor, contacta a soporte.';
      } else {

           // Obtener tickets de la orden desde Supabase
        const { data: ticketsInfo, error: ticketsError } = await supabase
          .from('event_attendees')
          .select('*')
          .eq('event_order_id', commerceOrder);

        console.log('Tickets obtenidos:', ticketsInfo);
        
        if (ticketsError) {
          console.error('Error al obtener los tickets desde Supabase:', ticketsError.message);
          paymentStatusMessage = 'Hubo un problema al recuperar los detalles de tus tickets. Por favor, contacta a soporte.';
        } else {
          // obtener evento
          const { data: eventInfo } = await supabase
            .from('events')
            .select('*')
            .eq('id', ticketsInfo[0]?.event_id)
            .single();

            eventData = eventInfo;
            ticketData = ticketsInfo;
        }

        paymentDetails = {
          ...orderData,
          flowStatus: status,
          flowAmount: amount,
          // flowFee: fee,
          flowCommerceId: orderData.payment_external_id || null,
          ticketsData: ticketData,
          event: eventData
        };

        // Verificar si el estado en la base de datos es diferente al estado en Flow
        if (orderData.status !== 'paid' && status === 2) {
          paymentDetails.status = 'paid';
          paymentStatusMessage = '¡Gracias por tu pago! Tu transacción ha sido completada exitosamente.';
        } else {
          // Determinar el mensaje de estado del pago
          switch (status) {
            case 1:
              paymentStatusMessage = 'Tu pago está pendiente de confirmación. Te notificaremos una vez que se confirme.';
              break;
            case 3:
              paymentStatusMessage = 'Lamentablemente, tu pago ha sido rechazado. Por favor, intenta nuevamente o utiliza otro método de pago.';
              break;
            case 4:
              paymentStatusMessage = 'Tu pago ha sido anulado. Si crees que esto es un error, por favor, contacta a soporte.';
              break;
            default:
              paymentStatusMessage = 'Estado del pago desconocido. Por favor, contacta a soporte para más información.';
          }
        }
      }
    } else {
      console.error('Error al consultar el estado del pago en Flow:', flowResponse.statusText);
      paymentStatusMessage = 'No se pudo verificar el estado de tu pago en este momento. Por favor, intenta más tarde.';
    }
  } else {
    console.error('Token no proporcionado en la solicitud.');
    paymentStatusMessage = 'No se recibió la información necesaria para verificar tu pago.';
  }
}
---
<Layout>
  <AppHeader />

  <main class="flex flex-col items-center min-h-screen bg-gray-100 py-10">
    <div class="max-w-3xl w-full bg-white shadow-lg rounded-2xl p-6 lg:p-10 mx-4">

      {paymentDetails ? (
        <>
          <h1 class="text-2xl font-semibold text-green-600 mb-4 font-[Unbounded]">{paymentStatusMessage}</h1>

          <div class="space-y-3 text-gray-700 font-[Prompt]" >
            <p><span class="font-semibold">ID de la Orden:</span> {paymentDetails.id}</p>
            <p><span class="font-semibold">Estado en Flow:</span> {paymentDetails.flowStatus === 2 ? 'Pagado' : 'No Pagado'}</p>
            <p><span class="font-semibold">Monto Total:</span> ${paymentDetails.flowAmount}</p>
            {/* <p><span class="font-semibold">Comisión de Pago:</span> ${paymentDetails.flowFee}</p> */}
            <p><span class="font-semibold">ID de Pago en Comercio:</span> {paymentDetails.flowCommerceId}</p>
          </div>

          {(paymentDetails.status === 'paid' && paymentDetails.ticketsData.length) && (
            <div class="mt-8">
              <h2 class="text-xl font-bold text-gray-800 mb-4 font-[Unbounded]">Tickets Adquiridos</h2>
              <div class="space-y-6">
                {paymentDetails.ticketsData.map(ticket => (
                  <div class="mt-0 pt-8 lg:pt-12 px-4 lg:px-0">
                    <TicketInfo ticket={ticket} event={paymentDetails.event} client:only />
                  </div>
                ))}
              </div>
            </div>
          )}
        </>
      ) : (
        <p class="text-gray-600">{paymentStatusMessage}</p>
      )}

    </div>
  </main>

  <AppFooter />
</Layout>

