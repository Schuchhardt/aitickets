---
import { supabase } from "../../lib/supabaseClient";
import Layout from "../../layouts/Layout.astro";
import AppHeader from "../../components/AppHeader.vue";
import AppFooter from "../../components/AppFooter.vue";
import EventHeader from "../../components/EventHeader.vue";
import EventTabs from "../../components/EventTabs.vue";
import TicketInfo from "../../components/TicketInfo.vue";

import "../../styles/global.css";

// Obtener el ID de la entrada desde la URL
const { id } = Astro.params;

let ticket = null;
let event = null;
let errorMessage = null;

if (id) {
  // Obtener los datos del ticket
  const { data: ticketData, error } = await supabase
    .from("event_attendees")
    .select("*")
    .eq("id", id)
    .single();

  console.log("Datos obtenidos del ticket:", ticketData);

  if (error || !ticketData) {
    errorMessage = "Ticket no encontrado";
  } else {
    // Obtener datos completos del evento
    const { data: eventData } = await supabase
      .from("events")
      .select("*")
      .eq("id", ticketData.event_id)
      .single();

    event = eventData;

    // load event dates
    const getTimeFromTimestamp = (timestamp) => {
      const date = new Date(timestamp);
      const hours = String(date.getHours()).padStart(2, "0");
      const minutes = String(date.getMinutes()).padStart(2, "0");
      const seconds = String(date.getSeconds()).padStart(2, "0");
      return `${hours}:${minutes}:${seconds}`;
    };
    const defaultDate = {date: event.start_date, start_time: getTimeFromTimestamp(event.start_date), end_time: getTimeFromTimestamp(event.end_date)};
    const { data: event_dates, error: errorDates } = await supabase
    .from("event_dates")
    .select("*")
    .eq("event_id", event.id)
    if (errorDates){
      console.error("Error al obtener las fechas:", errorDates);
      event.dates = [defaultDate]
    } else {
      event.dates = event_dates.length > 0 ? event_dates : [defaultDate];
    }
  
    // Obtener datos del asistente
    const { data: attendee } = await supabase
      .from("attendees")
      .select("first_name, last_name, email")
      .eq("id", ticketData.attendee_id)
      .single();

    

    ticket = {
      event_name: event?.name || "Evento desconocido",
      event_dates: event?.dates || "Fecha no disponible",
      ticket_name: "Entrada General",
      attendee_name: `${attendee?.first_name || ""} ${attendee?.last_name || ""}`.trim(),
      attendee_email: attendee?.email || "Correo no disponible",
      qr_code: ticketData.qr_code || null,
      internal_id: ticketData.internal_id,
    };
  }
}
---

<Layout>
  <AppHeader client:idle />
  <main class="flex flex-col items-center min-h-screen bg-gray-100">
    <div class="max-w-6xl mx-auto w-full">
      
      <!-- Tarjeta del Ticket (Pegada arriba) -->
      <div class="mt-0 pt-8 lg:pt-12 px-4 lg:px-0">
        <TicketInfo ticket={ticket} event={event} client:only />
      </div>

      <!-- Contenedor colapsable del evento -->
      <div class="w-full mt-6">
        <details class="bg-white p-4 rounded-lg shadow-lg">
          <summary class="text-lg font-semibold cursor-pointer font-[Unbounded]">Detalles del Evento</summary>
          <div class="mt-4">
            <EventHeader event={event} client:idle />
            <EventTabs event={event} client:only />
          </div>
        </details>
      </div>
    </div>
  </main>
  <AppFooter client:idle />
</Layout>
