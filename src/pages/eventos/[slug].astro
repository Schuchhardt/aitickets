---
import _ from "lodash";
import { supabase } from "../../lib/supabaseClient";
import AppHeader from "../../components/AppHeader.vue";
import AppFooter from "../../components/AppFooter.vue";
import EventDetail from "../../components/EventDetail.vue";
import EventAssistant from "../../components/EventAssistant.vue";
import EventMetaTags from "../../components/EventMetaTags.astro";

import Layout from '../../layouts/Layout.astro';
import "../../styles/global.css";

export const prerender = false;

const { slug } = Astro.params;

// Obtener el evento
const { data: event, error } = await supabase
  .from("events")
  .select("*")
  .eq("slug", slug)
  .single();

if (!error || event) {
  // Obtener las categorías del evento
  const { data: categories, error: errorCategories } = await supabase
    .from("event_tags")
    .select("category_tags(name)") 
    .eq("event_id", event.id);

  //load categories
  if (errorCategories) {
    console.error("Error al obtener las categorías:", errorCategories);
  } else {
    // @ts-ignore
    event.tags = categories.map(c => c.category_tags).map(ct => ct.name);
  }

  //load tickets // TODO VALIDAR STOCK DE VENDIDAS QUE SEA MENOR A MAX_QTY
  const { data: event_tickets, error: errorTickets } = await supabase
  .from("event_tickets")
  .select("*")
  .eq("event_id", event.id) 
  .eq("is_gift", false) 
  .eq("status", "available")
  .lte("init_date", new Date().toISOString())
  .gte("end_date", new Date().toISOString())
  .gte("max_quantity", 1)
  .order("price", { ascending: true }); // Ordenar por precio

  console.log("event_tickets", event_tickets);

  if (errorTickets){
    console.error("Error al obtener las entradas:", errorTickets);
    event.tickets = []
  } else {
    event.tickets = event_tickets
  }

  // load event faqs
  const { data: event_faqs, error: errorFaqs } = await supabase
  .from("event_faqs")
  .select("*")
  .eq("event_id", event.id)
  if (errorFaqs){
    console.error("Error al obtener las faqs:", errorTickets);
    event.faqs = []
  } else {
    event.faqs = event_faqs;
  }

  // load event dates
  const getTimeFromTimestamp = (timestamp) => {
    const date = new Date(timestamp);
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    const seconds = String(date.getSeconds()).padStart(2, "0");
    return `${hours}:${minutes}:${seconds}`;
  };
  const defaultDate = {date: event.start_date, start_time: getTimeFromTimestamp(event.start_date), end_time: getTimeFromTimestamp(event.end_date)};
  const { data: event_dates, error: errorDates } = await supabase
  .from("event_dates")
  .select("*")
  .eq("event_id", event.id)
  if (errorDates){
    console.error("Error al obtener las fechas:", errorDates);
    event.dates = [defaultDate]
  } else {
    event.dates = event_dates.length > 0 ? event_dates : [defaultDate];
  }
  
  
} else {
  console.error("Error al obtener el evento:", error);
  // redirect to 404
  Astro.redirect('/404');
}


---
<Layout>
  <EventMetaTags event={event} />
    <AppHeader client:idle/>
    <EventDetail event={event} v-if={event} client:idle/>
    <EventAssistant event={event} v-if={event} client:idle/>
    <AppFooter client:idle/>
</Layout>
