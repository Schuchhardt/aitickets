---
const { event } = Astro.props;
const siteUrl = import.meta.env.SITE_URL || "https://aitickets.cl"; // Usa el dominio de entorno o uno por defecto
const fallbackImagePath = "/android-chrome-512x512.png";

// Normaliza rutas relativas para que siempre sean URLs absolutas
const buildAbsoluteUrl = (path) => {
  if (!path) return `${siteUrl}${fallbackImagePath}`;
  if (path.startsWith('http')) return path;
  if (path.startsWith('/')) return `${siteUrl}${path}`;
  return `${siteUrl}/${path}`;
};

// Convierte HTML en texto plano legible
const stripHtml = (html) => {
  if (!html) return "";
  return html
    .replace(/<br\s*\/?>/gi, ' ')
    .replace(/<[^>]+>/g, ' ')
    .replace(/&nbsp;/gi, ' ')
    .replace(/&amp;/gi, '&')
    .replace(/&quot;/gi, '"')
    .replace(/&#39;/gi, "'")
    .replace(/&lt;/gi, '<')
    .replace(/&gt;/gi, '>')
    .replace(/\s+/g, ' ')
    .trim();
};

// Función para generar el JSON-LD del evento
const generateEventJsonLd = (event, siteUrl) => {
  if (!event) return null;

  // Obtener fechas del evento
  const startDate = event.start_date || (event.dates?.[0]?.date);
  const endDate = event.end_date || (event.dates?.[event.dates.length - 1]?.date);
  
  // Obtener precios de los tickets
  const offers = event.tickets?.map(ticket => ({
    "@type": "Offer",
    "name": ticket.ticket_name || "Entrada General",
    "price": ticket.price || 0,
    "priceCurrency": "CLP",
    "availability": "https://schema.org/InStock",
    "url": `${siteUrl}/eventos/${event.slug}`,
    "validFrom": ticket.init_date || startDate,
    "validThrough": ticket.end_date || endDate
  })) || [];

  // Determinar el tipo de evento basado en las categorías/tags
  const eventType = event.tags?.includes('Festival') ? 'Festival' : 
                   event.tags?.includes('Concierto') ? 'MusicEvent' :
                   event.tags?.includes('Conferencia') ? 'BusinessEvent' :
                   'Event';

  const jsonLd: any = {
    "@context": "https://schema.org",
    "@type": eventType,
    "name": event.name,
  "description": stripHtml(event.description) || "Este evento no está disponible.",
    "url": `${siteUrl}/eventos/${event.slug}`,
  "image": buildAbsoluteUrl(event.image_url || fallbackImagePath),
    "startDate": startDate,
    "endDate": endDate,
    "eventStatus": "https://schema.org/EventScheduled",
    "eventAttendanceMode": "https://schema.org/OfflineEventAttendanceMode",
    "location": {
      "@type": "Place",
      "name": event.location,
      "address": {
        "@type": "PostalAddress",
        "addressLocality": event.location,
        "addressCountry": "CL"
      }
    },
    "organizer": {
      "@type": "Organization",
      "name": "AI Tickets",
      "url": siteUrl
    },
    "offers": offers.length > 0 ? offers : {
      "@type": "Offer",
      "price": 0,
      "priceCurrency": "CLP",
      "availability": "https://schema.org/InStock",
      "url": `${siteUrl}/eventos/${event.slug}`
    }
  };

  // Agregar fechas específicas si están disponibles
  if (event.dates && event.dates.length > 0) {
    jsonLd.subEvents = event.dates.map(date => ({
      "@type": "Event",
      "name": event.name,
      "startDate": `${date.date}T${date.start_time || '00:00:00'}`,
      "endDate": `${date.date}T${date.end_time || '23:59:59'}`,
      "location": jsonLd.location
    }));
  }

  return JSON.stringify(jsonLd);
};

const eventJsonLd = generateEventJsonLd(event, siteUrl);
const defaultDescription = "Este evento no está disponible.";
const plainDescription = stripHtml(event?.description) || defaultDescription;
---

<head>
  <title>{event?.name || "Evento no encontrado"}</title>
  <meta name="description" content={plainDescription} />

  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website" />
  <meta property="og:url" content={`${siteUrl}/eventos/${event?.slug}`} />
  <meta property="og:title" content={event?.name || "Evento no encontrado"} />
  <meta property="og:description" content={plainDescription} />
  <meta property="og:image" content={buildAbsoluteUrl(event?.image_url || fallbackImagePath)} />

  <meta property="og:logo" content="https://bgsmqjrdryafvlyxywud.supabase.co/storage/v1/object/public/Events/AITickets.svg" />

  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:url" content={`${siteUrl}/eventos/${event?.slug}`} />
  <meta name="twitter:title" content={event?.name || "Evento no encontrado"} />
  <meta name="twitter:description" content={plainDescription} />
  <meta name="twitter:image" content={buildAbsoluteUrl(event?.image_url || fallbackImagePath)} />

  <!-- JSON-LD Structured Data -->
  {eventJsonLd && (
    <script type="application/ld+json" set:html={eventJsonLd}></script>
  )}
</head>
